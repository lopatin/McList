// Generated by CoffeeScript 1.4.0
(function() {
  var mc;

  mc = McList;

  mc.Cursor = (function() {

    function Cursor(list) {
      this.list = list;
      this.char_history = [];
    }

    Cursor.prototype.set_char = function(new_char) {
      if (this.char) {
        this.char.element.removeClass('cursor');
      }
      this.char = new_char;
      this.char.element.addClass('cursor');
      this.list.render();
      return this.add_to_char_history(new_char);
    };

    Cursor.prototype.set_task = function(new_task) {
      return new_task.set_cursor();
    };

    Cursor.prototype.move_left = function() {
      if (this.char.prev) {
        return this.set_char(this.char.prev);
      }
    };

    Cursor.prototype.move_down = function() {
      var curr, next;
      next = this.char.task().next;
      if (this.char.task().has_children()) {
        return this.set_task(this.char.task().first_child);
      } else if (next) {
        return this.set_task(next);
      } else {
        curr = this.char.task().parent;
        while (curr) {
          if (curr.next) {
            this.set_task(curr.next);
            return;
          }
          curr = curr.parent;
        }
      }
    };

    Cursor.prototype.move_up = function() {
      var prev, temp;
      prev = this.char.task().prev;
      if (prev) {
        temp = prev.get_last_child(true) || prev;
        return this.set_task(temp);
      } else if (!this.char.task().parent.is_root()) {
        return this.set_task(this.char.task().parent);
      }
    };

    Cursor.prototype.move_right = function() {
      if (this.char.next) {
        return this.set_char(this.char.next);
      }
    };

    Cursor.prototype.move_to_last = function() {
      if (this.char.char_list.end) {
        return this.set_char(this.char.char_list.end);
      }
    };

    Cursor.prototype.move_to_first = function() {
      if (this.char.char_list.start) {
        return this.set_char(this.char.char_list.start);
      }
    };

    Cursor.prototype.task = function() {
      return this.char.task();
    };

    Cursor.prototype.add_to_char_history = function(char) {
      if (!(this.char_history[0] && this.char_history[0].character !== char.character)) {
        this.char_history.unshift(char);
      }
      if (this.char_history.length > 1000) {
        return this.char_history.splice(this.char_history.length - 1, 1);
      }
    };

    Cursor.prototype.ensure_focus = function() {
      var char, focused, _i, _len, _ref, _results;
      if (!(this.char && this.char.is_visible())) {
        console.log("ensure 1");
        console.log("char_history.length = " + this.char_history.length);
        focused = false;
        _ref = this.char_history;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          char = _ref[_i];
          if (char && char.is_visible() && !focused) {
            console.log("ENSURE FOCUS");
            this.set_char(char);
            _results.push(focused = true);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    return Cursor;

  })();

}).call(this);
