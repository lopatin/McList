// Generated by CoffeeScript 1.4.0
(function() {
  var mc;

  mc = McList;

  mc.Commander = {
    shift_mode: false,
    control_mode: false,
    alt_mode: false,
    key_queue: [],
    init: function() {
      var self;
      this.init_special_modes('keydown', true);
      this.init_special_modes('keyup', false);
      self = this;
      return $(document).bind('keydown', function(e) {
        var keyval;
        e.preventDefault();
        keyval = mc.KeyCodeHelper.get_key_value(e);
        return self.keystroke(keyval);
      });
    },
    init_special_modes: function(event, value) {
      return $(document).bind(event, function(e) {
        switch (e.keyCode) {
          case 16:
            return mc.Commander.shift_mode = value;
          case 17:
            return mc.Commander.control_mode = value;
          case 18:
            return mc.Commander.alt_mode = value;
        }
      });
    },
    keystroke: function(key) {
      if (key) {
        this.key_queue.push(key);
      }
      this.analyze_queue();
      return console.log(this.key_queue);
    },
    analyze_queue: function() {
      var charmap, self, task;
      self = this;
      task = mc.app.list.cursor.char.char_list.task;
      charmap = matches.pattern({
        "[..., 'escape']": function() {
          if (!mc.app.list.command_mode) {
            mc.app.list.toggle_command_mode();
            return self.key_queue = [];
          }
        },
        "[..., c]": function(c) {
          var deleted_task, target_task;
          if (mc.app.list.command_mode) {
            switch (c) {
              case 'l':
                mc.app.list.cursor.move_right();
                break;
              case 'h':
                mc.app.list.cursor.move_left();
                break;
              case '$':
                mc.app.list.cursor.move_to_last();
                break;
              case '0':
                mc.app.list.cursor.move_to_first();
                break;
              case 'k':
                if (task.prev) {
                  task.prev.set_cursor();
                }
                break;
              case 'j':
                if (task.task_list.to_array().length !== 0) {
                  task.task_list.start.set_cursor();
                } else if (task.next) {
                  task.next.set_cursor();
                }
                break;
              case 'a':
                mc.app.list.toggle_command_mode();
                break;
              case 'i':
                mc.app.list.toggle_command_mode();
                mc.app.list.cursor.move_left();
                break;
              case 'x':
                task.char_list.deleteChar();
                mc.app.list.cursor.move_right();
                break;
              case 'o':
              case 'return':
                task.parent.task_list.set_current(task);
                if (task.parent) {
                  task.parent.task_list.addTask();
                }
                break;
              case 'tab':
                if (task.prev && task.parent) {
                  target_task = task.prev;
                  task.parent.task_list.set_current(task);
                  console.log(task.parent.task_list);
                  deleted_task = task.parent.task_list.deleteTaskItem();
                  target_task.task_list.addTask(deleted_task);
                }
                break;
              case 'd':
                task.parent.task_list.set_current(task);
                task.parent.task_list.deleteTaskItem();
            }
          } else {
            switch (c) {
              case 'backspace':
                task.char_list.deleteChar();
                break;
              case 'return':
                if (task.parent) {
                  task.parent.task_list.addTask();
                }
                break;
              default:
                task.char_list.addChar(c);
            }
          }
          mc.app.list.root_task.render(true);
          mc.app.list.blink_in_second();
          return self.key_queue = [];
        }
      });
      return charmap(this.key_queue);
    }
  };

}).call(this);
