// Generated by CoffeeScript 1.4.0
(function() {
  var mc;

  mc = McList;

  mc.Task = (function() {
    var insert;

    function Task(parent, list, sentinel) {
      this.parent = parent;
      this.list = list;
      this.sentinel = sentinel;
      this.next = this.prev = null;
      if (!this.parent || !this.sentinel) {
        this.child_sentinel = new mc.Task(this, this.list, true);
        this.first_child = this.last_child = this.child_sentinel;
      } else {
        this.first_child = this.last_child = null;
      }
      this.char_list = new mc.CharNodeList(this);
      this.element = $("<div>").addClass('task');
      this.content_div = $("<li>").addClass('content').appendTo(this.element);
      this.children_div = $("<div>").addClass('children').appendTo(this.element);
      this.set_cursor();
      if (!this.parent) {
        this.list.element.append(this.element);
      }
      this.render();
    }

    Task.prototype.render = function(recursive) {
      var char, task, _fn, _i, _j, _len, _len1, _ref, _ref1, _results;
      if (this.sentinel) {
        return;
      }
      this.content_div.html('');
      _ref = this.char_list.to_array();
      _fn = function(char, list, content_div) {
        content_div.append(char.element);
        return char.element.bind('click mousedragged mousedown', function() {
          return list.cursor.set_char(char);
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        char = _ref[_i];
        _fn(char, this.list, this.content_div);
      }
      this.children_div.html('');
      if (recursive) {
        _ref1 = this.get_children();
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          task = _ref1[_j];
          this.children_div.append(task.element);
          _results.push(task.render(true));
        }
        return _results;
      }
    };

    Task.prototype.add_task = function(new_task, insert_before) {
      if (!this.parent) {
        return null;
      }
      if (!new_task) {
        new_task = new mc.Task(this.parent, this.list);
      }
      new_task.parent = this.parent;
      new_task.list = this.list;
      if (this.sentinel) {
        this.parent.first_child = this.parent.last_child = new_task;
        new_task.next = new_task.prev = null;
      } else if (insert_before) {
        if (this.parent.first_child === this) {
          this.parent.first_child = new_task;
        }
        insert.call(this, 'prev', 'next', new_task);
      } else {
        if (this.parent.last_child === this) {
          this.parent.last_child = new_task;
        }
        insert.call(this, 'next', 'prev', new_task);
      }
      return new_task;
    };

    insert = function(dir1, dir2, new_task) {
      var temp;
      if (this[dir1]) {
        temp = this[dir1];
        new_task[dir1] = temp;
        this[dir1] = new_task;
        new_task[dir2] = temp[dir2];
        return temp[dir2] = new_task;
      } else {
        new_task[dir2] = this;
        new_task[dir1] = null;
        return this[dir1] = new_task;
      }
    };

    Task.prototype.is_root = function() {
      return !this.parent;
    };

    Task.prototype["delete"] = function() {
      if (!this.parent) {
        return null;
      }
      if (this.next && this.prev) {
        this.next.prev = this.prev;
        this.prev.next = this.next;
      } else if (this.next) {
        this.next.prev = null;
        this.parent.first_child = this;
      } else if (this.prev) {
        this.prev.next = null;
        this.parent.last_child = this;
      } else {
        this.parent.first_child = this.parent.last_child = this.parent.child_sentinel;
      }
      return this;
    };

    Task.prototype.get_children = function() {
      var arr, curr;
      arr = [];
      curr = this.first_child;
      while (curr) {
        arr.push(curr);
        curr = curr.next;
      }
      return arr;
    };

    Task.prototype.has_children = function() {
      return this.first_child && this.first_child !== this.child_sentinel;
    };

    Task.prototype.set_cursor = function() {
      console.log(this.list);
      this.list.cursor.set_char(this.char_list.end);
      return this.list.render();
    };

    Task.prototype.get_last_child = function(recursive) {
      if (this.sentinel) {
        return this.parent;
      } else if (recursive && this.has_children()) {
        return this.last_child.get_last_child(true);
      } else if (this.last_child.sentinel) {
        return null;
      } else {
        return this.last_child;
      }
    };

    Task.prototype.to_string = function() {
      return this.char_list.to_string();
    };

    return Task;

  })();

}).call(this);
